#!/usr/bin/env python3

import fileinput
import random
from collections import deque

from perlcompat import die, warn, getopts
import graph_tools
import randwalk

def RN_sampling(G: graph_tools.Graph, p: float) -> graph_tools.Graph:
    V = list(G.vertices())
    random.shuffle(V)
    nsample = int(len(V) * p)
    Vs = V[:nsample]
    return compose_subgraph(G, Vs)

def RW_sampling(G: graph_tools.Graph, p: float, c:float = 0.15) -> graph_tools.Graph:
    s = G.random_vertex()
    agent = randwalk.SRW(G, current=s)
    while agent.ncovered < G.nvertices() * p:
        if random.uniform(0, 1) <= c:
            agent.current = s
        agent.advance()
    Vs = set(agent.path)
    return compose_subgraph(G, Vs)

def RJ_sampling(G: graph_tools.Graph, p: float, c:float = 0.15) -> graph_tools.Graph:
    agent = randwalk.SRW(G, current=G.random_vertex())
    while agent.ncovered < G.nvertices() * p:
        if random.uniform(0, 1) <= c:
            agent.current = G.random_vertex()
        agent.advance()
    Vs = set(agent.path)
    return compose_subgraph(G, Vs)

def BFS_sampling(G: graph_tools.Graph, p: float) -> graph_tools.Graph:
    q = deque()
    q.append(G.random_vertex())
    Vs = []
    while q and len(Vs) < G.nvertices() * p:
        v = q.pop()
        if not v in Vs:
            Vs.append(v)
            N = list(G.neighbors(v))
            random.shuffle(N)
            for w in N:
                q.append(w)
    return compose_subgraph(G, Vs[:int(G.nvertices() * p)])

def DFS_sampling(G: graph_tools.Graph, p: float) -> graph_tools.Graph:
    q = deque()
    q.append(G.random_vertex())
    Vs = []
    while q and len(Vs) < G.nvertices() * p:
        v = q.popleft()
        if not v in Vs:
            Vs.append(v)
            N = list(G.neighbors(v))
            random.shuffle(N)
            for w in N:
                q.append(w)
    return compose_subgraph(G, Vs[:int(G.nvertices() * p)])

def compose_subgraph(G: graph_tools.Graph, Vs: [int]) -> graph_tools.Graph:
    Gs = graph_tools.Graph(directed=G.directed())
    Gs.add_vertices(*Vs)
    for u in Vs:
        for v in Vs:
            if G.has_edge(u, v) and not Gs.has_edge(u, v):
                Gs.add_edge(u, v)
    return Gs

def main():
    opts = getopts('d:i:o:p:s:t:')
    directed = opts.d if opts.d else False
    p = float(opts.p) if opts.p else 0.1
    seed = int(opts.s) if opts.s else None
    if seed:
        random.seed(seed)
    in_fmt = opts.i if opts.i else 'dot'
    out_fmt = opts.o if opts.o else 'dot'
    G = graph_tools.Graph(directed=directed)
    G.import_graph(in_fmt, list(fileinput.input()))

    Gs: graph_tools.Graph = None
    if opts.t == 'RN':
        Gs = RN_sampling(G, p)
    elif opts.t == 'RE':
        Gs = RE_sampling(G, p)
    elif opts.t == 'RW':
        Gs = RW_sampling(G, p)
    elif opts.t == 'RJ':
        Gs = RJ_sampling(G, p)
    elif opts.t == 'BFS':
        Gs = BFS_sampling(G, p)
    elif opts.t == 'DFS':
        Gs = DFS_sampling(G, p)                
        
    print(Gs.export_graph(out_fmt), end='')

if __name__ == "__main__":
    main()
